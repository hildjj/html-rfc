#!/usr/bin/env node
// -*- js -*-

var fs   = require('fs');
var path = require('path');

var jQuery = require('jQuery');
var log4js = require('log4js');
var opt    = require('optimist');

var pretty = require('../lib/html-pretty').pretty;
var rfc    = require('../lib/html-rfc');
var nit    = require('../lib/nit');
var misc   = require('../lib/misc');

var whenEver = misc.whenEver;
var rename   = misc.deferize(fs.rename);

var nit_path = path.resolve(path.dirname(module.filename),
                            "../nits");

var argv = opt
    .usage('Update an HTML I-D or RFC\n' +
           'Usage: $0 [input] [output]\n\n' +
           'input defaults to stdin\n' +
           'output defaults to stdout')
    .boolean('h')
    .describe('h', 'Show help')
    .boolean('backup')
    .describe('backup', 'Create a backup file of the input, then overwrite the input file.  Allows 1+ input files.')
    .alias('backup', 'b')
    .string('nitdir')
    .describe('nitdir', 'A directory of modification scripts')
    .boolean('final')
    .describe('final', 'Prepare for final submission (makes the file harder to edit)')
    .boolean('rfc-editor')
    .describe('rfc-editor', 'Perform final RFC-editor modifications')
    .boolean('verbose')
    .alias('verbose', 'v')
    .describe('verbose', 'Increase the logging level to TRACE')
    .argv;

if (argv['h']) {
    opt.showHelp();
    process.exit(64);
}

function logErr(er) {
    log.error(er);
    process.exit(1);
}

function process_rfc(input, output, nits) {
    if (input) {
        input = fs.createReadStream(input);
        input.on('error', logErr);
    } else {
        input = process.stdin;
    }

    if (output) {
        argv.outfile = output;
        if (output === "/dev/null") {
            argv.outdir = null;
        } else {
            argv.outdir = path.dirname(output);
        }
        output = fs.createWriteStream(output);
        output.on('error', logErr);
    } else {
        output = process.stdout;
        argv.outdir = process.cwd();
    }

    var arrfc; // pirates write these
    return new rfc.RFC(input, log, argv).pipe(function(r) {
        arrfc = r;
        return arrfc.lint(nits);
    }).done(function() {
        pretty(arrfc.document, output);
    });
}

var log = log4js.getLogger();
log4js.appenderMakers['console']({"writer": function(evt) { process.stderr.write(evt + "\n")}});
log.setLevel(argv.verbose ? "ALL" : "WARN");

// use (in order):
//  - core set
//  - per-user set
//  - others specified on the command-line
var home = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
var ihome = path.join(home, ".idemponit");
var ndirs = [nit_path, ihome];
if (argv.nitdir) {
    ndirs = ndirs.concat(argv.nitdir);
}

whenEver(ndirs, function(p) {
    // which of the nit dirs exist?
    var def = jQuery.Deferred();
    fs.exists(p, function(exists) {
        def.resolve(exists ? p : null);
    });
    return def;
}).pipe(function() {
    // arguments is all of the existing directories
    return whenEver(arguments, function(dir) {
        return dir ? nit.loadDir(dir) : null;
    });
}).pipe(function() {
    // arguments is an array of nit arrays.  Flatten.
    var args = [].slice.call(arguments);
    var nits = args.reduce(function(a,b) {
        return a.concat(b);
    });

    if (argv.backup) {
        return whenEver(argv._, function(input) {
            var output = input;
            input = output + ".bak";
            return rename(output, input).pipe(function() {
                return process_rfc(input, output, nits);
            });
        });
    } else {
        var input = argv._.shift();
        var output = argv._.shift();
        return process_rfc(input, output, nits);
    }
}).fail(logErr);
