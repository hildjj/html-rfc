#!/usr/bin/env node
// -*- js -*-

var fs   = require('fs');
var path = require('path');

var jQuery = require('jQuery');
var log4js = require('log4js');
var opt    = require('optimist');

var pretty   = require('../lib/html-pretty').pretty;
var rfc      = require('../lib/html-rfc');
var whenEver = require('../lib/misc').whenEver;

var nit_path = path.resolve(path.dirname(module.filename),
                            "../nits");

var argv = opt
    .usage('Update an HTML I-D or RFC\n' +
           'Usage: $0 [input] [output]\n\n' +
           'input defaults to stdin\n' +
           'output defaults to stdout')
    .boolean('h')
    .describe('h', 'Show help')
    .string('nitdir')
    .describe('nitdir', 'A directory of modification scripts')
    .boolean('final')
    .describe('final', 'Prepare for final submission (makes the file harder to edit)')
    .boolean('rfc-editor')
    .describe('rfc-editor', 'Perform final RFC-editor modifications')
    .boolean('verbose')
    .alias('verbose', 'v')
    .describe('verbose', 'Increase the logging level to TRACE')
    .argv;

if (argv['h']) {
    opt.showHelp();
    process.exit(64);
}

var input = argv._.shift();
var output = argv._.shift();
var log = log4js.getLogger();
log4js.appenderMakers['console']({"writer": function(evt) { process.stderr.write(evt + "\n")}});

log.setLevel(argv.verbose ? "ALL" : "WARN");

if (input) {
    input = fs.createReadStream(input);
    input.on('error', function(err) {
        log.error(err);
        process.exit(1);
    });
} else {
    input = process.stdin;
}

if (output) {
    argv.outfile = output;
    if (output === "/dev/null") {
        argv.outdir = null;
    } else {
        argv.outdir = path.dirname(output);
    }
    output = fs.createWriteStream(output);
    output.on('error', function(err) {
        log.error(err);
        process.exit(1);
    });
} else {
    output = process.stdout;
    argv.outdir = process.cwd();
}

function logErr(er) {
    log.error(er);
    process.exit(1);
}

// use (in order):
//  - core set
//  - per-user set
//  - others specified on the command-line
var home = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
var ihome = path.join(home, ".idemponit");
var ndirs = [nit_path, ihome];
if (argv.nitdir) {
    ndirs = ndirs.concat(argv.nitdir);
}

new rfc.RFC(input, log, argv).done(function(r) {
    whenEver(ndirs, function(p) {
        // which of the nit dirs exist?
        var def = jQuery.Deferred();
        path.exists(p, function(exists) {
            def.resolve(exists ? p : null);
        });
        return def;
    }).done(function() {
        whenEver(arguments, function(d) {
            // each of the existing paths, plus nulls
            return d ? r.loadDir(d) : null;
        }).done(function() {
            r.lint().done(function() {
                // We're finally done
                pretty(r.document, output);
            }).fail(logErr);
        }).fail(logErr);
    }).fail(logErr);
}).fail(logErr);


