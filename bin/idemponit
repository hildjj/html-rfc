#!/usr/bin/env node
// -*- js -*-

var rfc = require('../lib/html-rfc');
var pretty = require('../lib/html-pretty').pretty;
var opt = require('optimist');
var path = require('path');
var fs = require('fs');
var log4js = require('log4js');

var nit_path = path.resolve(path.dirname(module.filename),
                            "../nits")

var argv = opt
    .usage('Update an HTML I-D or RFC\n' +
           'Usage: $0 [input] [output]\n\n' +
           'input defaults to stdin\n' +
           'output defaults to stdout')
    .boolean('h')
    .describe('h', 'Show help')
    .string('nitdir')
    .default('nitdir', nit_path)
    .describe('nitdir', 'A directory of modification scripts')
    .boolean('final')
    .describe('final', 'Prepare for final submission (makes the file harder to edit)')
    .boolean('rfc-editor')
    .describe('rfc-editor', "Perform final RFC-editor modifications")
    .argv;

if (argv['h']) {
    opt.showHelp();
    process.exit(64);
}

var input = argv._.shift();
var output = argv._.shift();
var log = log4js.getLogger();
log4js.appenderMakers['console']({"writer": function(evt) { process.stderr.write(evt + "\n")}});

if (input) {
    input = fs.createReadStream(input);
    input.on('error', function(err) {
        log.error(err);
        process.exit(1);
    });
} else {
    input = process.stdin;
}

if (output) {
    if (output === "/dev/null") {
        argv.outdir = null;
    } else {
        argv.outdir = path.dirname(output);
    }
    output = fs.createWriteStream(output);
    output.on('error', function(err) {
        log.error(err);
        process.exit(1);
    });
} else {
    output = process.stdout;
    argv.outdir = process.cwd();
}

var r = new rfc.RFC(input, log, argv, function(err, r) {
    if (!err) {
        r.lint(argv.nitdir, function(err, doc) {
            if (err) {
                process.exit(1);
            }
            pretty(doc, output);
        });
    }
});

